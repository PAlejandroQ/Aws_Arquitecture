AWSTemplateFormatVersion: '2010-09-09'
Description: 'Automated RAG System Deployment on EC2 Ubuntu (Laboratory)'

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: 'EC2 instance type (Free Tier: t2.micro)'

  KeyName:
    Type: String
    Default: RAG-Key-CFN
    Description: 'Key Pair name for SSH access (must exist)'

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: 'Latest Ubuntu Server 20.04 LTS AMI'

Resources:
  # 1. Security Group (Virtual Firewall)
  RAGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable SSH and RAG API access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: 'SSH port for administrative access'
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: 'API port for RAG service'

  # 2. EC2 Instance with User Data
  RAGInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref RAGSecurityGroup
      Tags:
        - Key: Name
          Value: RAG-CFN-Instance
        - Key: Environment
          Value: Lab
        - Key: Project
          Value: RAG-Demo
      UserData:
        Fn::Base64: |
          #!/bin/bash
          # AWS RAG Laboratory - EC2 Ubuntu Initialization Script
          # This script runs automatically when the EC2 instance starts
          # It installs Docker and deploys the RAG application using Docker Compose

          # 1. Update system and install basic dependencies
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install -y ca-certificates curl gnupg lsb-release git

          # 2. Install Docker
          # Add Docker's official GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          # Add Docker repository
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Install Docker Engine
          sudo apt update -y
          sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

          # Start and enable Docker service
          sudo systemctl start docker
          sudo systemctl enable docker

          # Add ubuntu user to docker group (optional, for convenience)
          sudo usermod -aG docker ubuntu

          # 3. Clone the RAG project from GitHub
          cd /home/ubuntu
          git clone https://github.com/PAlejandroQ/Puc_RAG.git rag-demo
          chown -R ubuntu:ubuntu rag-demo
          cd rag-demo

          # 4. Start the RAG application using Docker Compose
          # This will build and start all services: Ollama, Elasticsearch, and the FastAPI app
          sudo docker compose up --build -d

Outputs:
  InstanceId:
    Description: 'EC2 instance ID'
    Value: !Ref RAGInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  PublicIP:
    Description: 'Public IP of the RAG instance'
    Value: !GetAtt RAGInstance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-PublicIP'

  SecurityGroupId:
    Description: 'Security Group ID'
    Value: !Ref RAGSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
